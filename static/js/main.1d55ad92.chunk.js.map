{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","handleSubmit","e","a","async","preventDefault","console","log","state","val","axios","get","then","poke","pokemon","data","pooke","pookeVal","Object","values","setState","red","persons","mainImage","sprites","front_default","mainImage2","back_default","mainShiny","front_shiny","backShiny","back_shiny","pokeType","types","type","name","handleChange","target","value","toLowerCase","pokeInfo","pokeTye","style","textAlign","className","onSubmit","this","placeholder","onChange","Container","Row","Col","paddingTop","md","sm","xs","height","display","alignItems","justifyContent","src","alt","Pokemon","poketype","Component","pokeMap","map","index","lg","id","width","borderRadius","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1d55ad92.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport \"./App.css\";\nimport { Col, Row, Container } from \"reactstrap\"\nimport axios from \"axios\";\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      persons: [],\n      red: [],\n      pokeInfo: [],\n      mainImage: \"\",\n      mainImage2: \"\",\n      mainShiny: \"\",\n      backShiny: \"\",\n      pokeTye: \"\",\n      val: \"\",\n    }\n\n  }\n\n  handleSubmit = async (e) => {\n    e.preventDefault()\n\n\n    console.log(this.state.val)\n    await axios.get(`https://pokeapi.co/api/v2/pokemon/${this.state.val}/`)\n      .then(poke => {\n        const pokemon = poke.data\n        const pooke = pokemon\n        const pookeVal = Object.values(pokemon)\n        this.setState({ red: pooke, persons: pookeVal })\n      })\n    // console.log(Object.keys(this.state.red[13]))\n    let mainImage = this.state.red.sprites.front_default\n    let mainImage2 = this.state.red.sprites.back_default\n    let mainShiny = this.state.red.sprites.front_shiny\n    let backShiny = this.state.red.sprites.back_shiny\n    let pokeType = this.state.red.types[0].type.name\n\n    this.setState({\n      mainImage,\n      mainImage2,\n      pokeType,\n      mainShiny,\n      backShiny\n    })\n  }\n\n  handleChange = (e) => {\n\n    this.setState({\n      val: e.target.value.toLowerCase()\n    })\n  }\n\n\n\n  render() {\n\n    return (\n      <div style={{ textAlign: \"center\" }} >\n        <h1 className=\"main-text\">Pokedex</h1>\n        <form className=\"mb-3 \" onSubmit={this.handleSubmit}>\n          <input className=\"sb-btn\" placeholder=\"Poke name\" type=\"text\" onChange={this.handleChange} />\n          <button className=\"button ml-2\" value=\"search\" ><p>Search</p></button>\n        </form>\n        <Container>\n          <Row>\n            <Col style={{ paddingTop: \"10px\" }} md={3} sm={12} xs={12}>\n              <div style={{\n                height: \"134px\",\n                display: \"flex\",\n                alignItems: \"center\",\n                justifyContent: \"center\"\n              }} className=\"neumorphism\">\n                <img src={this.state.mainImage} alt=\"\" />\n              </div>\n              <div style={{\n                height: \"134px\",\n                display: \"flex\",\n                alignItems: \"center\",\n                justifyContent: \"center\"\n              }} className=\"neumorphism\">\n                <img src={this.state.mainImage2} alt=\"\" />\n              </div>\n            </Col>\n            <Col md={6}>\n              <Pokemon poketype={this.state.pokeType} poke={this.state.persons} />\n            </Col>\n            <Col style={{ paddingTop: \"10px\" }} md={3} sm={12} xs={12}>\n              <div style={{\n                height: \"134px\",\n                display: \"flex\",\n                alignItems: \"center\",\n                justifyContent: \"center\"\n              }} className=\"neumorphism\">\n                <img src={this.state.mainShiny} alt=\"\" />\n              </div>\n              <div style={{\n                height: \"134px\",\n                display: \"flex\",\n                alignItems: \"center\",\n                justifyContent: \"center\"\n              }} className=\"neumorphism\">\n                <img src={this.state.backShiny} alt=\"\" />\n\n              </div>\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    )\n  }\n}\n\nexport default App;\n\n\n\n\nfunction Pokemon(props) {\n  let pokeMap = props.poke.map(index => index)\n  return (\n\n    <div className=\"neumorphism\">\n      <Container>\n        <Row>\n          <Col lg={5} md={12}>\n            <ul className=\"list-unstyled box\" style={{ textAlign: \"left\" }}>\n              <li className=\" p-4\">Name - {pokeMap[10]}</li>\n              <li className=\" p-4\">Type - {props.poketype}</li>\n              <li className=\" p-4\">Weight - {pokeMap[16]}</li>\n              <li className=\" p-4\">Height - {pokeMap[4]}</li>\n            </ul>\n          </Col>\n          <Col className=\"pokeball-box\" lg={7} md={12}>\n            <div id=\"mainbox\" className=\"pokeball\">\n              <div className=\"pokecenter\">\n                <div className=\"minicenter d-flex align-items-center justify-content-center\">\n                  <div style={{ width: \"15px\", height: \"15px\", borderRadius: \"100%\" }} className=\"mini-mini\">\n\n                  </div>\n                </div>\n              </div>\n              <div className=\"pokecenterleft\">\n\n              </div>\n            </div>\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}